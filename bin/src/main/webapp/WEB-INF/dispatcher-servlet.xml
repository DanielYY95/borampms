<?xml version="1.0" encoding="UTF-8"?>
<<<<<<< HEAD
<!-- 
# xml의 dtd 선언 부분
1. dtd : 상단에 어떤 태그를 사용할지를 선언하는 부분.
2. dtd에 맞는 태그를 활용 할 수 있다.
# 스프링은 이 dispacher-servlet.xml에서 선언한 클래스들을 
객체로 컨테이너에서 로딩 후, 해당 객체들을 url 패턴으로 호출하여 처리한다.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:util="http://www.springframework.org/schema/util"
	 xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
  		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd     
        http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
   		http://www.springframework.org/schema/websocket
		http://www.springframework.org/schema/websocket/spring-websocket.xsd" >

 
<!-- mvc 하위의 패키지를 자동 등록 처리 -->
<!-- Controller / Service / Dao annotation 된 것을 자동등록함 -->
<!-- 웹 서버가 기동되면 mvc 패키지에 있는 모든 객체를 로딩한다. -->
	<context:component-scan base-package="mvc">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository"/>	
	</context:component-scan>
	
	<!-- 컨테이너에서 공통 DB 설정 정보 가져오기 -->
	<context:property-placeholder
		location="classpath:/resource/config"/>
	<!-- 웹 소켓 통신을 위한 handler 선언 
			component로 선언한 이름과 url 패턴 mapping
			server handler와 client에서 자바스크립트로 호출할 url 패턴 선언
	-->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>
	<mvc:default-servlet-handler/>
	<websocket:handlers>
		<websocket:mapping handler="chatHandler" path="/chat-ws.do"/>
	</websocket:handlers>
	
	
<!-- lib에 있는 만들어진 객체들을 생성하고 사용
	1. DB 처리를 위한 연결 객체 선언화
		config 안에 선언된 key를 아래 DB 연결 처리 정보에 매칭해준다
-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close"> <!-- 자원 해제 처리 메서드를 지정 -->
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.pw}"/>
	</bean>
	
<!-- 
	2. mybatis 컨테이너에서 사용하기
 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- dataSource에 의해 연결된 객체 호출하기 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 설정 파일 지정하기 -->
		<property name="configLocation" value="classpath:resource/mybatis.Spring.xml"/>
	</bean>
<!-- 
	3. DAO 인터페이스 패키지 선언
		mybatis 프레임워크에서 자동으로 만들어주는 추상 메서드({} - body가 없는 메서드)를 기준으로
		상속받은 실제 객체를 만들어준다.
		이때, 인터페이스가 있는 패키지를 지정해야 한다.
 -->
 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
 		<property name="basePackage" value="mvc.dao"/>
 	</bean>
 	
<!--
	파일 업로드를 위한 viewer 선언 
 -->
 	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

<!-- 
	# jsp / html 뷰와 기본 bean view의 우선순위 설정
	1. jsp view 기본 설정 - 우선순위 property 설정 : 1
	2. bean으로 등록하는 view 설정 - 우선순위 property 설정 : 0
	   컨테이너에서 viewer를 찾을 때, 등록된 수가 적은 것부터 찾아나가는 것이 효율적이기 때문
 -->
	<!-- jsp view는 기본적으로 설정되어있으나, 우선순위 명시를 위해 선언함 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 접두어,접미어 매핑
			 하기와 같이 선언하여 controller의 view 호출 시 접두어와 접미어의 생략이 가능하도록 한다
			 WEB-INF\views\a02_mvc\a01_empList.jsp == \a02_mvc\a01_empList
		-->
		<property name="prefix" value="WEB-INF\views\"/>
		<property name="suffix" value=".jsp"/>
		<property name="order" value="1"/>
	</bean>
	<!-- 정의한 bean viewer 선언 우선순위 첫 번째로 지정 -->
	<bean id="btnViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0"/>
	</bean>
	<!-- 다운로드 viewer 등록
			return "download"
	-->
	<bean id="download" class="mvc.util.DownloadViewer"/>
	
	<!-- json view 선언
			return "pageJsonReport"
	 -->
	<bean id="pageJsonReport" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<property name="contentType" value="text/html; charset=utf-8"></property>
	</bean>
	
	
	<!-- 메일 발송 서버(SMTP) 설정 
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com"/>
		<property name="port" value="587"/>
		<property name="username" value=""/>
		<property name="password" value=""/>
		
		보안 관련 설정
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	-->
	
	
	<!-- 다국어 처리 모듈 등록 -->
	<!-- 1. 핵심 클래스 
		 2. 다국어 파일 기본 위치 등록
		 3. 위치 기반 session 설정
	 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message.msg</value>
			</list>
		</property>
	</bean>
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>
	

	
	
	<!-- advice 선언
	<bean id="profiler" class="a02_aop.advice.Profiler"/>
	aspect = poincut+advice
	<aop:config>
		<aop:aspect id="traceAspect" ref="profiler">
			특정 시점과 수행 내용 선언  dao 처리시
			<aop:pointcut expression="execution(public * springweb.a02_mvc.a03_dao..*(..))" 
				id="publicMethod"/>
			pointcut의 시점 메서드를 연결처리(weaving)
			<aop:around method="trace" pointcut-ref="publicMethod"/>
		</aop:aspect>
	</aop:config>
	-->
=======
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:util="http://www.springframework.org/schema/util"
	 xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
  		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd     
        http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
   		http://www.springframework.org/schema/websocket
		http://www.springframework.org/schema/websocket/spring-websocket.xsd" >
		
	<context:component-scan base-package="mvc">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/><!-- @Controller한 것은 해당 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	</context:component-scan>	
	
	<!-- 컨테이너에 공통 DB 설정 정보 가져오기  -->
	<context:property-placeholder location="classpath:/resource/config"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" > <!-- 자원의 해제하는 처리의 메서드를 지정 -->
	
		<property name="driverClassName" value="${driver}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${user}"></property>
		<property name="password" value="${pass}"></property>
		
	</bean>
	<!-- 
		2. mybatis 컨테이너에서 사용하기..
	 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- dataSource에 의해 연결된 객체 호출하기 -->
	<property name="dataSource" ref="dataSource"></property> <!-- ref는 bean 이름이다. -->
	<!-- 설정파일 지정하기 -->
	<property name="configLocation" value="classpath:resource/mybatis.Spring.xml"></property>
	
	</bean>
	
	<!-- 3. Dao 인터페이스 패키지 선언하기 
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="mvc.dao"></property>
		
	
	</bean>
	
	<!--  채팅 -->	
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>
	<mvc:default-servlet-handler/>
	<websocket:handlers>
		<websocket:mapping handler="chatHandler" path="/chat-ws.do"/>
	</websocket:handlers>
	
	<!-- 파일 업로드를 위한 viewer 선언  -->
	<bean id="multipartResolver" 
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>
	

	<!-- jsp view는 기본적으로 설정이 되어있지만, 우선 순위 때문에 선언한다 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">

		<property name="prefix" value="WEB-INF\views\"/>	 
		<property name="suffix" value=".jsp"/>
		<property name="order" value="1"></property>
		
	</bean>
	
	<!-- 정의한 bean viewer 선언. 우선 순위 첫번째로 지정  -->
	<bean id="btnViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0"></property>
	
	</bean>
	
	<!-- 다운로드 viewer 등록
			return "download"
	-->
	<bean id="download" class="mvc.util.DownloadViewer"/>
	
	
	
	
	<!-- json 뷰 선언 
		return "pageJsonReport" -->
	
	<bean id="pageJsonReport" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<property name="contentType" value="text/html; charset=utf-8"></property>
	</bean>
	
	<!-- 다국어 처리를 위한 모듈 등록
	1. 핵심 클래스
	2. 다국어 파일 기본 위치 등록
		\message\msg.properties 기준파일
	3. 위치기반 session 설정  -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message.msg</value>
			</list>
		</property>	
	</bean>
	<bean id="localeResolver" 
	class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>
	
	<!-- advice 선언
	<bean id="profiler" class="a02_aop.advice.Profiler"/>
	aspect = poincut+advice
	<aop:config>
		<aop:aspect id="traceAspect" ref="profiler">
			특정 시점과 수행 내용 선언  dao 처리시
			<aop:pointcut expression="execution(public * springweb.a02_mvc.a03_dao..*(..))" 
				id="publicMethod"/>
			pointcut의 시점 메서드를 연결처리(weaving)
			<aop:around method="trace" pointcut-ref="publicMethod"/>
		</aop:aspect>
	</aop:config>
	-->
	
>>>>>>> branch 'main' of https://github.com/DanielYY95/borampms
	
</beans>